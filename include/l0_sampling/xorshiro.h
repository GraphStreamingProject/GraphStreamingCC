#pragma once

#include <cstdint>

static uint64_t rotl(const uint64_t x, int k) {
  return (x << k) | (x >> (64 - k));
}

const uint64_t secret = 18161517132367261381UL;


static uint64_t xorshiro_64(uint64_t x, uint64_t seed) {
  seed ^= secret;
  auto temp1 = rotl(x, 24) ^ seed ^ (seed << 16); // a, b
  auto temp2 = rotl(seed, 37); // c
  return temp1 + temp2;
}

static uint32_t xorshiro_32(uint64_t x, uint64_t seed) {
  return xorshiro_64(x,seed) >> 32;
}

/* ***** XXHASH ***** */
alignas(64) static const uint8_t xxxh_secret[192] = {
      0xb8, 0xfe, 0x6c, 0x39, 0x23, 0xa4, 0x4b, 0xbe, 0x7c, 0x01, 0x81, 0x2c, 0xf7, 0x21, 0xad, 0x1c,
      0xde, 0xd4, 0x6d, 0xe9, 0x83, 0x90, 0x97, 0xdb, 0x72, 0x40, 0xa4, 0xa4, 0xb7, 0xb3, 0x67, 0x1f,
      0xcb, 0x79, 0xe6, 0x4e, 0xcc, 0xc0, 0xe5, 0x78, 0x82, 0x5a, 0xd0, 0x7d, 0xcc, 0xff, 0x72, 0x21,
      0xb8, 0x08, 0x46, 0x74, 0xf7, 0x43, 0x24, 0x8e, 0xe0, 0x35, 0x90, 0xe6, 0x81, 0x3a, 0x26, 0x4c,
      0x3c, 0x28, 0x52, 0xbb, 0x91, 0xc3, 0x00, 0xcb, 0x88, 0xd0, 0x65, 0x8b, 0x1b, 0x53, 0x2e, 0xa3,
      0x71, 0x64, 0x48, 0x97, 0xa2, 0x0d, 0xf9, 0x4e, 0x38, 0x19, 0xef, 0x46, 0xa9, 0xde, 0xac, 0xd8,
      0xa8, 0xfa, 0x76, 0x3f, 0xe3, 0x9c, 0x34, 0x3f, 0xf9, 0xdc, 0xbb, 0xc7, 0xc7, 0x0b, 0x4f, 0x1d,
      0x8a, 0x51, 0xe0, 0x4b, 0xcd, 0xb4, 0x59, 0x31, 0xc8, 0x9f, 0x7e, 0xc9, 0xd9, 0x78, 0x73, 0x64,
      0xea, 0xc5, 0xac, 0x83, 0x34, 0xd3, 0xeb, 0xc3, 0xc5, 0x81, 0xa0, 0xff, 0xfa, 0x13, 0x63, 0xeb,
      0x17, 0x0d, 0xdd, 0x51, 0xb7, 0xf0, 0xda, 0x49, 0xd3, 0x16, 0x55, 0x26, 0x29, 0xd4, 0x68, 0x9e,
      0x2b, 0x16, 0xbe, 0x58, 0x7d, 0x47, 0xa1, 0xfc, 0x8f, 0xf8, 0xb8, 0xd1, 0x7a, 0xd0, 0x31, 0xce,
      0x45, 0xcb, 0x3a, 0x8f, 0x95, 0x16, 0x04, 0x28, 0xaf, 0xd7, 0xfb, 0xca, 0xbb, 0x4b, 0x40, 0x7e,
};
#if defined(_MSC_VER)     /* Visual Studio */
#  define XXXH_swap64 _byteswap_uint64
#elif XXH_GCC_VERSION >= 403
#  define XXXH_swap64 __builtin_bswap64
#else
static uint64_t XXXH_swap64 (uint64_t x)
{
  return  ((x << 56) & 0xff00000000000000ULL) |
          ((x << 40) & 0x00ff000000000000ULL) |
          ((x << 24) & 0x0000ff0000000000ULL) |
          ((x << 8)  & 0x000000ff00000000ULL) |
          ((x >> 8)  & 0x00000000ff000000ULL) |
          ((x >> 24) & 0x0000000000ff0000ULL) |
          ((x >> 40) & 0x000000000000ff00ULL) |
          ((x >> 56) & 0x00000000000000ffULL);
}
#endif

static uint64_t XXXH3_avalanche(uint64_t h64)
{
  h64 = rotl(h64, 37);
  h64 *= 0x165667919E3779F9ULL;
  h64 = rotl(h64, 32);
  return h64;
}

static uint64_t xxxh3(const uint64_t input, uint64_t seed) {
  auto const bitflip1 = 0xb9e942ea7b738267 + seed;
  auto const bitflip2 = 0x3a5296093bbc56af - seed;
  auto const input_lo = input ^ bitflip1;
  auto const input_hi = input ^ bitflip2;
//  auto const acc = (XXXH_swap64(input_lo)+input)*(input_hi+(input>>32))+1187556297029260237UL;
  auto const acc = (input_lo+input)*(input_hi+(input>>32))
        +1187556297029260237UL;
  return XXXH3_avalanche(acc);
}

static uint32_t xxxh3_32(uint64_t x, uint64_t seed) {
  return (uint32_t)xxxh3(x, seed);
}
